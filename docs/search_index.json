[["scraping.html", "Chapter 2 Scraping 2.1 Web Scraping and main Challenges", " Chapter 2 Scraping The following chapter covers advanced topics for web scraping with a focus on immobiliare.it. A new simplifying scraping workflow is proposed that removes frictions related to complexities as well as offering a faster solution with respect to traditional package oriented scraping methods. The workflow introduces two superficial abstract partitions that composes each websites: website structure and content architecture. As a consequence of the partition issues related to web scraping are logically arranged so that at first are solved the ones related to crawling the links, then it comes the turn of the proper scraping part. The segmentation is then forced onto the specific immobiliare.it case. Website structure mainly accounts the way individual subpages are linked to one another through urls. The solution proposed is a inverse crawling methodology, where at first url anatomy is reverse engineered and secondly links are extracted from the composed urls. Once the structure is explicit so that each part can be singularly and directly targeted by scraping functions, then the focus shifts to the content architecture. For content architecture it is meant the way information is arranged within each single webpage. A rooted-tree graph representation of web site content architecture is conveniently used to map scraping functions design into immobiliare.it. By means of rvest Wickham (2019) either website structure and content architecture can be separately handled and the main function involved are presented. scrapeprice() outlines the strategy adopted to look for the price inside each of the web pages. The skeleton of the function is then reproduced for all the data needed. Moreover it is shown a main function where parallel execution takes place that combines all the functions into a single call. Scraping best practices are applied from the web server point of view, kindly requesting permission and delayed sending rate. Form the the web client point of view continuous scraping is granted by server blocks through User Agent pool rotation and dealing failure handlers to bypass empty content. Then a run time parallel scraping benchmark is presented for two different back ends future and doMC along with two parallel looping constructions, furrr Vaughan and Dancho (2018) and foreach Microsoft and Weston (2020). Both of the two have displayed similar results, nevertheless the former offers a Tidier and future oriented choice. Furthermore an overview of open challenges is offered so that this work might be extended and integrated with newer technologies or paradigms. In the end legal profiles are addressed comparing scraping results and difficulties with a counterpart study. 2.1 Web Scraping and main Challenges Definition 2.1 (Scraping) Web Scraping is a technique aimed at extracting data from static or dynamic internet web pages. It can be applied simultaneously or automatically by a scheduler that plans execution at a given time. Content in web pages is the most of the times well organized and accessible. This is made possible by the effort put into building both the website structure and the content architecture. For website structure it is meant the way urls, pointing to different web pages, are arranged throughout the website oriented to the best user experience. Website structure constitutes a first dimension of hierarchy. A practical example might regard the way files are arranged into folders, where files are urls and folders are web pages. Popular website structure examples are social-networks where posts can be scrolled down within a single url named wall. The scrolling option might end due to the end of the feed, but the experience is a never-ending web page associated to a single url. Indeed personal profiles have dedicated unique url and personal photos or friends are allocated into specific personal profile sub-domains. Connection among webpages are complex networks that happens at many levels, photos, friends, places. As a different example online newspapers display their articles in the front page of their websites. and By accessing to one of them all the pertinent articles sometimes can be reached in the low bottom or in the side part of the webpage. Suggested articles during website exploration can be seen twice, that is the more the website is covered the more is the likelihood of seeing the same article twice. Recursive website structures are popular in newspaper-kind websites since it is part of the expectation on websites user experience. Online Retailers as Amazon, based on search filters, groups inside a single web page (i.e. page n° 1) a fixed set of items, having their dedicated single urls attached to them. Furthermore many of the retailers, Amazons too, allows the user to search into many pages i.e. page n° 2,3, looking for another fixed set of items. The experience ends when the last page associated to the last url is met. These are few examples of how websites can be built and infinitely many others are available ranging from the easiest to the most complex, as in figure @ref(fig:html_tree). Generally speaking website structures try to reflect both the user expectations on the product and the creative design expression of the web developer. This is also constrained to the programming languages chosen and the specific requirements that the website should met. For all the reason said, for each product, whether it is physical product, or service, or information there exists a multitude of website structure. For each website structure there exists multiple content architecture. For each content architecture there exists many front end languages which are ultimately designated to satisfy multiple end users. In the future chances are that websites might display tailor made customization of contents and design based on specific personal preferences. As a further addition web design in scraping plays an important role since the more are implied sophisticated graphical technologies, the harder will be scraping information. (#fig:html_tree)Linearity in Website Structure vs Audience Education A second dimension of hierarchy is brought by content architecture by means of the language used for content creation and organization i.e. HTML. HTML stands for Hyper Text Markup Language and is the standard markup language for documents designed to be showed into a web browser. It can be supported by technologies such as Cascading Style Sheets (CSS) and other scripting languages, as an example JavaScript (HTML 2020). HTML inner language properties brings along the hierarchy that is then inherited from the website structure. According to this point of view the hierarchical website structure is a consequence of the language chosen for building content architecture. Since a hierarchy structure is present a direction must be chosen, this direction is from root to leaves i.e. arborescence. CSS language stands for Cascading Style Sheets and is a style sheet language used for modifying the appearance of a document written in a markup language(CSS 2020). The combination of HTML and CSS offers a wide flexibility in building web sites, once again expressed by the vast amount of different websites designs on the web. Some websites components also might be tuned by a scripting language as Javascript. JavaScript enables interactive web pages and the vast majority of websites use it for all the operations that are performed by the client in a client-server relationship (JavaScript 2020). In the context of scraping Javascript adds a further layer of difficulty. As a matter of fact Javascript components are dynamic and scraping requires specialized libraries or remote web browser automation ((Harrison 2020) R Bindings for Selenium 2.0 Remote WebDriver) to catch the website content. CSS instead allows the scraper to target a class of objects in the web page that shares same style (e.g. same CSS query) so that each element that belongs to the class (i.e. share the same style) can be gathered. This practice provides tremendous advantages since by a single CSS query a precise set of objects can be obtained within a unique function call. First and Second dimension of the scraping problem imply hierarchy. One way to imagine hierarchy in both of the two dimensions are graph based data structures named as Rooted Trees. By analyzing the first dimension through the lenses of Rooted trees it is possible to compress the whole setting into tree graph jargon, as a further reference on notation and wordings can be found in Diestel (2006). Rooted trees must start with a root node which in this context is the domain of the web page. Each Node is a url destination and Edges are the connections to web pages. Jumps from one page to the others (i.e. connections) are possible in the website by nesting urls inside webpages so that within a single webpage the user can access to a limited number of other links. Each edge is associated to a Weight whose interpretation is the run time cost to walk from one node to its connected others (i.e. from a url to the other). In addition the content inside each node takes the name of payload, which is ultimately the goal of the scraping processes. The walk from node body to node h2 in figure below is called path and it represented as an ordered list of nodes connected by edges. In this context each node can have both a fixed and variable outgoing sub-nodes that are called Children . When root trees have a fixed set of children are called k-ary rooted trees. A node is said to be Parent to other nodes when it is connected to them by outgoing edges, in the figure below headre is the parent of nodes h1 and p. Nodes in the tree that shares the same parent node are said Siblings, h1 and p are siblings in figure @ref(fig:html_tree). Moreover Subtrees are a set of nodes and edges comprised of a parent and its descendants e.g. node main with all of its descendants might constitute a subtree. The concept of subtree in both of the problem dimensions plays crucial role in cutting run time scraping processes as well as fake headers provision (see section 3.2.1). If the website strucuture is locally reproducible and the content architecture within webpages tends to be equal, then functions for a single subtree might be extended to the rest of others siblings subtrees. Local reproducibility is a property according to which starting from a single url all the related urls can be inferred from a pattern. Equal content architecture throughout different single links means to have a standard shared-within-webpages criteria according to which each single rental advertisement has to refer (e.g. each new advertisement replicates the structure of the existing ones). In addition two more metrics describe the tree: level and height. The level of a node \\(\\mathbf{L}\\) counts the number of edges on the path from the root node to \\(\\mathbf{L}\\) , e.g. head and body, are at the same level. The height is the maximum level for any node in the tree, from now on \\(\\mathbf{H}\\), in figure @ref(fig:html_tree). What is worth to be anticipating is that functions are not going to be applied directly to siblings in the upper general rooted tree (i.e. from the domain). Instead the approach follwed is segmenting the highest tree into a sequence of single children unit that shares the same level (nav, main, header, title and footer) for reasons explained in section 3.2.1. (#fig:html_tree) html tree structure of a general website, randomly generated online 2.1.1 Immobiliare.it website structure The website structure of immobiliare can be assumed to be similar to the one of the largest online retailer Amazon. For that reason they both fall into the same website structure category. Sharing the same category might imply that the transition from customized website structure scraping functions (i.e. immobiliare) do not take extraordinary sophistication to be extended to other comparable websites (i.e. Amazon). Assuming that the scraper knows where data is stored (i.e. payloads), the mandatory step is a way to compose and decompose url anatomy. As a matter of fact each time the scraper script visits the website it should not step back from domain root node and then down the longest path reaching the final content node. Instead it should try to shorten the path by minimizing the number of nodes encountered, conditioned to the respective nodes weights. This is a first important conclusion since by separating the website strcuture from the content architecture scraping is massively faster and should not no more rely on the website forced root-to-node paths. immobiliare.it is a clean url miss lit and it can be easily parsed and queried according to some parameters (i.e. filters) selected in their dedicated section (e.g. city, number of rooms 5, square footage less than 60 \\(m^2\\), macrozone fiera and centro). The url is shaped so that each further parameters and its respcetive values are appended at the end of the domain url https://www.immobiliare.it/. Parameters and values are appended with a proper semantic, not all the sematics are equal, that is why scraping needs sophostication when applied to other websites. One major adavatge in this context is immobilaire being a clean url, whose sematic is oriented to usability and accessibility. Once parameters are applied to the root domain this constitutes a newer rooted tree whose url root node is the parametrized.It might have this appearance (params are city of Milan, square footage is less than 60 \\(m^2\\): domain + filters i.e. affitto-case/milano/?superficieMinima=60. Since for the moment are generated only links related to page n°1 containing the first 25 advs links (see figure 3.1) all the remaining siblings nodes corresponding to the subsequent pages have to be initialized. In here resides the utility of Local reproducibility property introduced in the previous section. The remaining siblings, e.g. the ones belonging to page 2 (with the attached 25 links), to page 3 etc. can be generated by adding a further parameter &amp;pag=n, where n is the page number reference (from now on referred as pagination). Author customary choice is to stop pagination up to 300 pages since spatial data can not be to too large due to computational requirements imposed by inla methodology 5. The code chunk below has the aim to mimic the url syntax filters building, s given a set of information it can reproduce any related sibling. detaching website structure from content architecture. References "],["algorithm-1.html", "Chapter 3 Algorithm 1 3.1 Scraping Best Practices and Security provisions 3.2 Security provisions: User Agents, Proxies and Handlers 3.3 Explicit Parallel Scraping 3.4 Open Challenges and Further Improvemements 3.5 Legal Profiles (ancora non validato)", " Chapter 3 Algorithm 1 Just a sample algorithmn if (!missing(&quot;macrozone&quot;)) { macrozone = tolower(macrozone) %&gt;% iconv(to = &quot;ASCII//TRANSLIT&quot;) %&gt;% str_trim() idzone = list() zone = fromJSON(here::here(&quot;ALLzone.json&quot;)) for (i in seq_along(macrozone)) { zone$name = zone$name %&gt;% tolower() if (grepl(macrozone[i], zone)[2]) { pos = grepl(macrozone[i], zone$name, ignore.case = T) idzone[i] = zone[pos, ] %&gt;% select(id) } else { stop(paste0(&quot;zone:&quot;, macrozone[i], &quot; is not recognized&quot;)) } } idzone = idzone %&gt;% unlist() %&gt;% unique() mzones = glue::glue_collapse(x = idzone, &quot;&amp;idMZona[]=&quot;) dom = &quot;https://www.immobiliare.it/&quot; stringa = paste0(dom, tipo, &quot;-case/&quot;, citta, &quot;/?&quot;, mzones) npages_vec = str_c(stringa, &quot;&amp;pag=&quot;, 2:npages) %&gt;% append(stringa, after = 0) } else { dom = &quot;https://www.immobiliare.it/&quot; stringa = paste0(dom, tipo, &quot;-case/&quot;, citta, &quot;/&quot;) # mzones npages_vec = glue(&quot;{stringa}?pag={2:npages}&quot;) %&gt;% append(stringa, after = 0) } Up to this point pagination has generated a vector of siblings nodes whose children elements number is fixed (i.e. 25 links per page 3.1 lower part). That makes those trees k-ary, where k is 25 indicating the number of children leaves. K-ary trees are rooted trees in which each node has no more than k children, in this particular case final leaves. The well known binary rooted tree is actually a special case of k-ary when \\(k = 2\\). parameters reverse engineering process and 25-ary trees with equal content structure across siblings allow to design a single function to call that could be mapped for all the other siblings. In addition in order to further unroll the website a specific scraping function grabs the whole set of 25 links per page. As a result a single function call of scrape_href() can grab the links corresponding to page 1. Then the function is mapped for all the generated siblings nodes (i.e. up to 300) obtaining a collection of all links belonging to the set of pages. Ultimately the complete set of links corresponds to every single advertisement posted on immobiliare.it at a given time. Figure 3.1: immobiliare.it website structure, authors source 3.0.1 Immobiliare.it content architecture with rvest To start a general scraping function the only requirements are a target url (i.e. the filtered root node url) and a way to compose url (i.e. pagination ). Then a session class object html_session is opened by specifying the url and the request data that the user needs to send to the web server, see left part to dashed line in figure 3.2. Information to be attached to the web server request will be further explored later, tough they are mainly three: User Agents, emails references and proxy servers. html_session class objects contains a list number of useful data such as: the url, the response, cookies, session times etc. Once the connection is established (response request 200) all the following operations rely on the opened session, in other words for the time being in the session the user will be authorized with the already provided request data. The list object contains the xml/html content response of the webpage and that is where data needs to be parsed and class converted. The list can disclose as well other interesting meta information related to the session but in this context are not collected. The light blue wavy line follows the steps required to get the content parsed from the beginning to the end. Figure 3.2: rvest general flow chart, authors source To the right of dashed line in the flow chart 3.2 are painted a sequence of rvest(Wickham 2019) functions that follow a general step by step text comprehension rules. rvest first handles parsing the html respose content of the web page within the session through read_html(). Secondly, as in figure 3.3, it looks for a single node html_nodes() through a specified CSS query. CSS is a way to route rvest to consider a precise node or set of nodes in the web page. For each information contained in each of the web page a different CSS query has to be called. Thirdly it converts the content (i.e. payload) into a human readable text with html_text(). A simplified version of the important contents to be scraped in each single link is sketched in figure 3.3 Figure 3.3: immobiliare.it important content structure, authors source The code chunk below exemplifies a function that can scrape the price. The function explicitly covers only the right part to the dashed line (figure 3.2) of the whole scraping process. The initial part (left dashed in same figure), where session is opened and response is converted is handles inside the second code chunk where get.data.catsing() is. scrapeprice.imm = function(session) { opensess = read_html(session) price = opensess %&gt;% html_nodes(css = &quot;.im-mainFeatures__title&quot;) %&gt;% html_text() %&gt;% str_trim() if (is.null(price) || identical(price, character(0))) { price2 = opensess %&gt;% html_nodes(css = &quot;.im-features__value , .im-features__title&quot;) %&gt;% html_text() %&gt;% str_trim() if (&quot;prezzo&quot; %in% price2) { pos = match(&quot;prezzo&quot;, price2) return(price2[pos + 1]) %&gt;% str_replace_all(c(`\\200` = &quot;&quot;, `\\\\.` = &quot;&quot;)) %&gt;% str_extract(&quot;\\\\-*\\\\d+\\\\.*\\\\d*&quot;) %&gt;% str_replace_na() %&gt;% str_replace(&quot;NA&quot;, &quot;Prezzo Su Richiesta&quot;) } else { return(NA_character_) } } else { return(price) %&gt;% str_replace_all(c(`\\200` = &quot;&quot;, `\\\\.` = &quot;&quot;)) %&gt;% str_extract(&quot;\\\\-*\\\\d+\\\\.*\\\\d*&quot;) %&gt;% str_replace_na() %&gt;% str_replace(&quot;NA&quot;, &quot;Prezzo Su Richiesta&quot;) } } The function takes as a single argument a session object, then It reads the inner html content in the session storing the information into an obj called the opensess. Another obj is created, namely price, right after the pipe operator a CSS query into the html is called. The CSS query .im-mainFeatures__title points to a precise group of data inside the web page, right below the main title. Expectation are that price is a one-element chr vector, containing the price and other unnecessary non-UTF characters. Then the algorithm enters into the first if statement. The handler checks if the object price is empty. If it doesnt the algorithm jumps to the end of the function and returns the quantity cleaned. But If it does it takes again the opensess and tries with a second css query .im-features__value , .im-features__title in a second data location where price might be also found. Please note that this is all done within the same session, so no more additional request information has to be sent. Since the latter CSS query points to data stored inside a list object, for the time being the newly created price2 is a list containing various information. Then the algorithm flow enters into the second if statement that checks whether \"prezzo\" is matched the list or not, if it does it returns the +1 position index element with respect to the prezzo positioning. This happens because data in price2 list are stored by couples sequentially, e.g. [title, Appartamento Sempione, energy class, G, prezzo, 1200/al mese]. When it returns the element corresponding to +1 position index it applies also some data wrangling with stringr package to keep out overabundant characters. The function then escapes in the else statement by setting price2 = NA_Character_ once no CSS query could be finding the price information. the NA-character-string type has to be imposed due to fact that later they can not be bind. In other words if the function is evaluated for a url and returns the price quantity, but then is evaluated for url2 and outputs NA (no character) then results can not be combined into dataframe due to different object types. The skeleton used for price scraping constitutes a standard format in the analysis and it is adopted for all the rest of scraping functions. By keeping equal the CSS query what it is required to change is the matching term, i.e. numero camere should be pasted in the place of prezzo to look for how many rooms there are in the house. This is true for all the information contained in the list accessed by the fixed css query. In addition some other functions outputs need to undergo to further heavy cleaning steps in order to be usable As a consequence of that functions need also to be broken down by pieces by single .R files, whose names correspond to each important information. Once all the functions have been designed they need to be called together and then data coming after them need to be combined into a single final dataframe. This is done by fastscrape() Which at first checks the validity of the url, then takes the same url as input and filters it as a session object. Then simultaneously all the functions are called and then combined. All this happens inside a foreach parallel loop called by scrape.all.info() ## [ fastscrape ] ---- ## first endpoint function options(future.rng.onMisuse=&quot;ignore&quot;) fastscrape = function(npages_vec){ tic() plan(multisession, workers = availableCores()) result = tibble( title = future_map(npages_vec, possibly( ~{ sesh = html_session(.x, user_agent(agent = agents[sample(1)])) scrapetitle_imm(session = sesh)},NA_character_, quiet = FALSE))%&gt;% flatten_chr(), monthlyprice = future_map(npages_vec, possibly(~{ sesh = html_session(.x, user_agent(agent = agents[sample(1)])) scrapeprice_imm(session = sesh) },NA_character_, quiet = FALSE))%&gt;% flatten_chr(), nroom = future_map(npages_vec, possibly( ~{ sesh = html_session(.x, user_agent(agent = agents[sample(1)])) scraperooms_imm(session = sesh) },NA_character_, quiet = FALSE))%&gt;% flatten_chr(), sqmeter = future_map(npages_vec, possibly( ~{ sesh = html_session(.x, user_agent(agent = agents[sample(1)])) scrapespace_imm(session = sesh) },NA_character_, quiet = FALSE))%&gt;% flatten_chr(), href = future_map(npages_vec, possibly( ~{ sesh = html_session(.x, user_agent(agent = agents[sample(1)])) scrapehref_imm(session = sesh) },NA_character_, quiet = FALSE))%&gt;% flatten_chr() ) toc() return(result) } Below it is printed the tree structure folder that composes the main elements of the scraping procedure. It can be noticed that the two folders, namely functions_singolourl and functions_url enclose all the single functions that allows to grab each information from the session. Folders with a customized function are then sourced within the two main functions, scrape.all and scrape.all.info so data can be extracted. levelName 1 immobiliare.it-WebScraping 2 ¦--functions_singolourl 3 ¦ ¦--0scrapesqfeetINS.R 4 ¦ ¦--0scrapenroomINS.R 5 ¦ ¦--0scrapepriceINS.R 6 ¦ ¦--0scrapetitleINS.R 7 ¦ ¦--ScrapeAdDate.R 8 ¦ ¦--ScrapeAge.R 9 ¦ ¦--ScrapeAgeBuilding.R 10 ¦ ¦--ScrapeAirConditioning.R 11 ¦ ¦--ScrapeAptChar.R 12 ¦ ¦--ScrapeCatastInfo.R 13 ¦ ¦--ScrapeCompart.R 14 ¦ ¦--ScrapeCondom.R 15 ¦ ¦--ScrapeContr.R 16 ¦ ¦--ScrapeDisp.R 17 ¦ ¦--ScrapeEnClass.R 18 ¦ ¦--ScrapeFloor.R 19 ¦ ¦--ScrapeHasMulti.R 20 ¦ ¦--ScrapeHeating.R 21 ¦ ¦--ScrapeHouseID.R 22 ¦ ¦--ScrapeHouseTxtDes.R 23 ¦ ¦--ScrapeLAT.R 24 ¦ ¦--ScrapeLONG.R 25 ¦ ¦--ScrapeLoweredPrice.R 26 ¦ ¦--ScrapeMetrature.R 27 ¦ ¦--ScrapePhotosNum.R 28 ¦ ¦--ScrapePostAuto.R 29 ¦ ¦--ScrapePropType.R 30 ¦ ¦--ScrapeReaReview.R 31 ¦ ¦--ScrapeStatus.R 32 ¦ ¦--ScrapeTotPiani.R 33 ¦ ¦--ScrapeType.R 34 ¦ °--take_location.R 35 ¦--scrapeALL.R 36 ¦--scrapeALLINFO.R 37 ¦--functions_url 38 ¦ ¦--ScrapeHREF.R 39 ¦ ¦--ScrapePrice.R 40 ¦ ¦--ScrapePrimaryKey.R 41 ¦ ¦--ScrapeRooms.R 42 ¦ ¦--ScrapeSpace.R 43 ¦ °--ScrapeTitle.R 44 ¦--libs.R 45 ¦--utils.R 46 ¦--README.Rmd 47 ¦--README.md 48 °--simulations 49 ¦--rt_match_vs_forloop.R 50 °--runtime_simul.R 3.1 Scraping Best Practices and Security provisions Robots.txt files are (rivedi citation) a way to kindly ask webbots, spiders, crawlers, wanderers to access or not access certain parts of a webpage. The de facto standard never made it beyond a informal Network Working Group INTERNET DRAFT. Nonetheless, the use of robots.txt files is widespread (e.g. https://en.wikipedia.org/robots.txt, https://www.google.com/robots.txt) and bots from Google, Yahoo adhere to the rules defined in robots.txt files, although their interpretation of those rules might differ. Robots.txt files are plain text and always found at the root of a websites domain. The syntax of the files in essence follows a field-name value scheme with optional preceding user-agent. Blocks are separated by blank lines and the omission of a user-agent field (which directly corresponds to the HTTP user-agent field) is seen as referring to all bots. # serves to comment lines and parts of lines. Everything after # until the end of line is regarded a comment. Possible field names are: user-agent, disallow, allow, crawl-delay, sitemap, and host. For further references on robotstxt are recommended (Meissner and Ren 2020, @google:robottxt). Some interpretation problems: Finding no robots.txt file at the server (e.g. HTTP status code 404) implies that everything is permitted. Subdomains should have there own robots.txt file if not it is assumed that everything is allowed. Redirects from subdomain www to the doamin is considered no domain change - so whatever is found at the end of the redirect is considered to be the robots.txt file for the subdomain originally requested. Further improvements in this direction might come with the polite package (Perepolkin 2019) which combines the effects of the robotstxt, the ratelimitr (Shah 2018) to limit sequential requests together with the memoise (Wickham et al. 2017) for robotstxt response caching. Even though the solution is well structured and This package is wrapped up around 3 simple but effective ideas: The three pillars of a polite session are seeking permission, taking slowly and never asking twice. The three pillars constitute the Ethical web scraping manifesto (Densmore 2019) which are common shared practises that are aimed to self regularize scrapers. These have to be intended as best practices, not in any case as law enforcements, however many scrapers themselves, as website administrators or analyst, have fought in their daily working tasks with bots. Crawling bots in intensive scraping processes might fake real client navigation logs and as a consequence might induce distorted analytics. Due to this fact comes the need to find a common operating ground and therefore politely asking for permission. 3.2 Security provisions: User Agents, Proxies and Handlers HTTP requests to the website server by web clients come with some mandatory information packed in it. The process according to which HTTP protocols allow to exchange information can be easily thought with an everyday real world analogy. As a generic person A rings the doors bell of person Bs house. A comes to B door with its personal information, its name, surname, where he lives etc. At this point B may either answer to A requests by opening the door and let him enter given the set of information he has, or it may not since B is not sure of the real intentions of A. This typical everyday situation in nothing more what happens billions of times on the internet everyday, the user browser (in the example above A) is interacting with a server website (part B) sending packets of information, figure 3.4. If a server does not trust the information provided by the user, if the requests are too many, if the requests seems to be scheduled due to fixed sleeping time, a server can block requests. In certain cases it can even forbid the user log to the website. The language the two parties exchanges are coded in numbers that ranges from 100 to 511, each of which has its own specific significance. A popular case of this type of interaction occurs when users are not connected to internet so the server responds 404, page not found. Servers are built with a immune-system like software that raises barriers and block users to prevent dossing or other illegal practices. Figure 3.4: How the web interacts between broswer and server This procedure is a daily issue to scraper that are trying to collect information from websites. Google performs it everyday with its spider crawlers, which are very sophisticated bots that scrapes over a enormous range of websites. This challenge can be addressed in multiple ways, there are some specific Python packages that overcome this issue. Precautions have not been taken lightly, and a simple but effective approach is proposed. 3.2.1 User Agents Spoofing Definition 3.1 (User Agents) A user agent (WhoIsHostingThis.com 2020) is a string of characters in each web browser that serves as identification card. The user agent permits the web server to be able to identify the user operating system and the browser. Then, the web server uses the exchanged information to determine what content should be presented to particular operating systems and web browsers on a series of devices. The user agent string includes the user application or software, the operating system (and their versions), the web client, the web clients version, as well as the web engine responsible for the content display (such as AppleWebKit). The user agent string is sent in the form of a HTTP request header. Since User Agents acts as middle man between the client request and the server response, then from a continuous scraping point of view it would be better rotating them, so that each time the middle man looks different. The solution adopted builds a vector of user agent strings identified by different specifications, different web client, different operating system and so on, then samples 1 of them Then whenever a request from a web browser is sent to a web server, 1 random sample string is drawn from the user agents pool. So each time the user is sending the request it appears to be a different User Agent. Below the user agents rotation pool: set.seed(27) agents = c(&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36&quot;, &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/602.2.14 (KHTML, like Gecko) Version/10.0.1 Safari/602.2.14&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36&quot;, &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36&quot;, &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36&quot;, &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36&quot;, &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0&quot;) agents[sample(1)] ## [1] &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36&quot; A more secure approach might be a further rotation of proxies between the back and forth sending-receving process. A proxy server acts as a gateway between the web user and the web server. While the user is exploiting a proxy server, internet traffic flows through the proxy server on its way to the server requested. The request then comes back through that same proxy server and then the proxy server forwards the data received from the website back to the client. The final result will be linear combination of User Agents ID and Proxy server for each sending requests, grating a high security level. Many proxy servers are offered in a paid version, so in this case since security barriers are not that high they will not be implemented. As a further disclaimer many online services are providing free proxies server access, but this comes at a personal security cost due to a couple of reasons: Free plan Proxies are shared among a number of different clients, so as long as someone has used them in the past for illegal purposes the client is indirectly inheriting their legal infringements. Very cheap proxies, for sure all of the ones free, have the activity redirected on their servers monitored, profiling in some cases a user privacy violation issue. 3.2.2 Handlers During scraping many difficulties are met. Some of them might come from website structure issues, so that rooted-tree hierarchies are changed as a consequence of a restructuring, better outlined in section 3.4. Some others might interest content architecture where data is reallocated to some other places in the webpage, as a consequence CSS query are no more able to grab the content. Handlers are explicitly built in this sense. The continuous building and testing of the scraping functioning has required the maintainer to have a precise and fast debugging experience. The following consideration might give a sense of the time consumed when handlers are not implied. API endpoints evokes 34 different scrapping functions that are supposed to point to 34 different data pieces. Within a single function call by default pagination generates 10 pages each of which contains at least 25 different single links to be scrapped. That leads to a number of 8500 single data information. The probability given 8500 associated to something going lost or unparsed is undoubtedly high. The solution proposed tries to deal with failure through implementing purrr adverb possibly(), which takes a function (a verb) and returns a modified version. In this case, the modified function will never throw an error. The approach is encouraged when functions need to be mapped over larger objects and when run time are long as pointed out in section 21.6 of Hadley Wickham (2017). title = future_map(npages_vec, possibly(~{ sesh = html_session(.x, user_agent(agent = agents[sample(1)])) scrapetitle_imm(session = sesh) }, NA_character_, quiet = FALSE)) %&gt;% flatten_chr() Then also inside each single scrapping function are bundled authorization handlers that protect the web server side from unpolite scraping practises. This set up allows to catch (and in some cases prevent) web sites poloicy misuses from the very beginning of the scraping process. Below some of the main authorization handlers implied: get_ua() verifies that the User Agent in the session is not the default one. get_ua = function(sess) { stopifnot(is.session(sess)) stopifnot(is_url(sess$url)) ua = sess$response$request$options$useragent return(ua) } is_url() verifies that the url input needed has the canonic form. This is done by a REGEX query. is_url = function(url) { re = &quot;^(?:(?:http(?:s)?|ftp)://)(?:\\\\S+(?::(?:\\\\S)*)?@)?(?:(?:[a-z0-9¡-&lt;ef&gt;&lt;U+00BF&gt;&lt;U+00BF&gt;](?:-)*)*(?:[a-z0-9¡-&lt;ef&gt;&lt;U+00BF&gt;&lt;U+00BF&gt;])+)(?:\\\\.(?:[a-z0-9¡-&lt;ef&gt;&lt;U+00BF&gt;&lt;U+00BF&gt;](?:-)*)*(?:[a-z0-9¡-&lt;ef&gt;&lt;U+00BF&gt;&lt;U+00BF&gt;])+)*(?:\\\\.(?:[a-z0-9¡-&lt;ef&gt;&lt;U+00BF&gt;&lt;U+00BF&gt;]){2,})(?::(?:\\\\d){2,5})?(?:/(?:\\\\S)*)?$&quot; grepl(re, url) } get_delay() checks through the robotxt file if a delay between each request is kindly welcomed. When response is NA delay is not required. dominio = &quot;immobiliare.it&quot; get_delay = function(domain) { message(sprintf(&quot;Refreshing robots.txt data for %s...&quot;, domain)) cd_tmp = robotstxt::robotstxt(domain)$crawl_delay if (length(cd_tmp) &gt; 0) { star = dplyr::filter(cd_tmp, useragent==&quot;*&quot;) if (nrow(star) == 0) star = cd_tmp[1,] as.numeric(star$value[1]) } else { 10L } } get_delay = memoise::memoise(get_delay) ## so that .get_delay results are cached get_delay(domain = dominio) ## [1] NA checkpermission() assess whether the domain or the related paths require specific actions or they prevent some activity on the target. checkpermission = function(dom) { robot = robotstxt(domain = dom) vd = robot$check()[1] if (vd) { cat(&quot;\\nrobot.txt for&quot;, dom, &quot;is okay with scraping!&quot;) } else { cat(&quot;\\nrobot.txt does not like what you&#39;re doing&quot;) stop() } } checkpermission(dom = dominio) ## ## robot.txt for immobiliare.it is okay with scraping! 3.3 Explicit Parallel Scraping Scraping run time is crucial when dealing with proactive web pages, especially in real estate where rental time to market is a major competitive advantage as well as monthly price within the day are flexible enough to respond to demand inputs. The issue is also posed to the API setting according to which if the API endpoint query does not respond within a fixed time neighbor, chances are that the call might be lost. Since the problem requires as many sessions opened as single links extracted (refer to section ??). MOreover since for each of the links extracted are supposed to be called 34 different functions (refer to section ??), as a consequence scraping run time without parallel execution might take some time. The extraordinary amount of time taken is caused by R executing tasks on a single processor sequentially one-by-one in queue (i.e. single thread computing). In order to overcome this inefficiency explicit parallel (sometimes improperly called asynchronous) scraping functions are proposed, so that computation do not employ vast cpu time (i.e. cpu-bound) and space. Modern processor architectures provide multiple cores on a single processor. As a result many computation can be split over processors and then multiple cores for each processor. The explicit characteristic affects the way the parallel back end is built, outlining the computing group and the parallel execution strategy. The computing group is a software concept as in (What Is Parallel Computing 2020), that mainly points out the number of R processes and their relative computing power/memory allocation according to which the task is going to be split. From a strictly theoretic perspective the working groups can be greater than the number of cores detected, but for optimization properties of computation, proper of each strategy proposed in here, are initialized as many workers as physical cores (default option for most of the backends, logical cores). Specifying the computing group is a critical step in each parallel execution that needs to be initialized right before the main function execution. Moreover a split computation strategy is accompained to computing groups by convenience, decisions mainly regards optimal memory space allocation. In the R ecosystem parallel libraries are a few and are mostly designed on looping constructions. The two choices are doMC along with the foreach loop constructor and Future with furrr (purrr and future). The latter is a generic, low-level API for parallel processing as in Bengtsson (2017). Future A variety of backends exist and third-party contributions meeting the specifications, which ensure that the same code works on all backends, If I were re-writing my code now, Id probably also use futures and purrr. The former adds some niceties to doparallel and foreach if you choose to use that syntax, like automatically exporting packages. And its backend-agnostic, Multisession futures are a special case of cluster futures. Two are the most important features of future back end: Tidy format together with the furrr (purrr looping contruction) package which enables tidy evaluation and the related convenient tidy sintx properties and packages. The other regars the The most flexible and strong Parallel libraries are Parallel, doParallel, doMC and Future, which offer different sintax but same construction. They all come with a specific looping constructor which is optmized with respect to For a quick but comprehensive perspective on Parallel theory both on hardware and software side Barney (2020) is strongly suggested. For a full reference focused on the R parallel ecosystem, run time simulations and advanced algorithm back end design strategies the authorities are (What Is Parallel Computing 2020). If the interest is to cut short theory and directly put R into parallel then a valuable resource is this blog, which inter alia covers the main debugging. doParallela among the other offers also detectCores() uncovers how many Hyper-Threading cores are at the disposition, since they do not provide any computational advantage the option logical is set false. Below the number of cores available on the following machine: ## total n° of Hyper-Threading cores on the machine is 12 ## ## total n° of NOT Hyper-Threading cores 6 All the following runtime examinations are performed on completescrape() which is a lightweight version of the function included in the API. Furthermore as a general criteria for loops are avoided inside single scraping functions due to Rcpp reasons, vectorization is preferred. Through scrape the approach is to test two different parallel back ends performances. The first attempt was using furrr package (Vaughan and Dancho 2018) which enables mapping (i.e. map) through a list from purrr, along with a future parallel back end. furrr gets along with the Tidyverse paradigm so it is expected to grow and maintained. Workers are specified though a plan with the command plan(multisession, workers = 2). Then the function operates as many other seen purrr variations: furrr::future_map(scrape(), .progress = T). Future is intuitive and easy to use, offers progress bar notifications and a dedicated website that covers also remote EC2 connections.Furthermore recently it has widened the flexibility of workers strategies by chunking strategy allowing to tweak batches of workers. The approach has shown decent performance, but its run time drastically increases when more requests are sent. This leads to a preventive conclusion about the computational complexity: it has to be at least linear with steep slope. Empirical demonstrations have been made: ( pensa se fare più simulazioni, prende tempo ) Figure 3.5: computational complexity analysis with Furrr On the x-axis in the figure 3.5 the number of compounded urls evaluated, on y-axis the run time taken measured in seconds. Iteration after iteration the function provides to the workers 1 further link to scrape untill all the set is inputted. Looking at the blue smoothing curve in between confidence lines the big-O guess might be linear time \\(\\mathcal{O}(n)\\), where n are the number of links considered. A second attempt tried to explore the foreach package (Microsoft and Weston 2020) originally developed by Microsoft R. The package enables a looping construct to explicitly distribute the computations to multiple R workers. foreach does offer a vast flexibility in terms of expressing the working group and clusters of workers. foreach minimizes also operations executed by isolating containers. That means all workers should be self containing enviroments including libraries function and exported objects. Flexibility comes at a cost of usability, as a matter of fact the loop constructor paradigm is much more complex with respect to furrr. The looping construction abstractly follows the r-base looping idea, below main steps are summarized: Detect cores, initialize workers based on number of cores, register the parallel back end registerDoParallel(cl,cores) define the iterator, i.e. i equal to the number of elements that are going to be looped .packages: Inherits the packages that are used in the tasks define below .combine: Define the combining function that bind results at the end (say cbind, rbind or tidyverse::bind_rows). .errorhandling: specifies how a task evaluation error should be handle. %dopar%: the dopar keyword suggests foreach with parallelization method then the function within the elements are iterated close clusters Figure 3.6: computational complexity analysis with Furrr It can be grasped quite easily by figure 3.6 that initially foreach takes some times to set up parallel workers but then the curve is flattened and a confident guess might be .5 sloped linear time \\(\\mathcal{O}(\\frac{n}{2})\\). 3.4 Open Challenges and Further Improvemements The main challenge remains unsolved since each single element has been optimized but scraping function and, as a consequence, REST API must be continuously maintained updated. As a matter of fact what unfortunately can not be predicted are the future changes that involves the first part of the scraping process i.e. decomposing the website structure. Indeed Content architecture, with some further improvements can take care of finding exact information within the web page even if the design is changed, and so both html/CSS. This idea is developed in the package Rcrawler Khalil (2018), which crawls the entire website and searches for targeted keywords. The major enhancement of this approach is that it neatly separates the website structure from the content architecture by locally saving all the html/xml files that compose the website. HTML are known to be generally lightweight so the crawl part does not weigh down the run time. The time all files are stored the algorithm searches for the keywords within the html files, then results filtered by keywords are grabbed. Performances with algorithm of this kind are very efficient but results are not effective due to keywords not always associated to the data needed. With that said a safer way to scrape exact content could be embedding complex task specific regular expression (flagging data location) within the HTML files and then calling on the location a CSS query. As a disclaimer Rcrawler is designed to be flexible enough to scrape a vast number of websites. As opposite the scraping functions here presented are exclusively built on top of immobiliare.it, even though they can be extended to other category related website with no effort 2.1.1. From a software point of view a more robust code can be obtained embedding recent R software development frameworks as Golem Colin Fay (2020) into the existing code. According to the most recent literature APIs (as well as Shiny) should be treated as R packages (Santiago (2020) goes in that sense) as argued in section 4.2 Colin Fay (2020) and in the comment by Dean Attali. As a consequence of that TDD (i.e.Test-Driven Development (Test Driven Development 2004)) through the tools of Wickham and Bryan (2020) and Wickham (2011) during package building can make software more robust, organized and production graded. Loadtest (???) can help figure out It can be missed to cite a popular API development integration service and automate testing tool Postman, which does the best when POST requests endpoints are served, since for the moment they are not required it is not used. puo parlare del HPC e la macchine da computing On the parallel computing side further run time performance boosts might be brought by integrating doAzureParallel miss lit which is built on top of foreach. doAzureParallel enables different Virtual Machines operating parallel computing throughout Microsoft Azure cloud. This comes at a further economic cost as a consequence it is not the first choice. Nonetheless it would perfectly shrinks run time by accelerating the number of requests sent among different processors/cores and cores, even though actually the end goal is to differentiate sessions. Cloud Virtual Machines allow from one hand to further add computational capabilties (more processore more cores), from the other they can internalize requests among different machines (a pool of agents for each VM), extending even more the linear combination of IDs. Moreover error messages can not sometimes be printed out in console and be undesrtood while in parallel beckend. as it is shown the stackoverflow reproducible example. As a consequence to that each time an error occurs the main functions needs to be taken out of from the parallel back end and separately evaluated. This is time consuming but for the time being no solutions have been found. 3.5 Legal Profiles (ancora non validato) Data that is online and public is always available for all is never a good answer to the question Can I use those web data to my scope. Immobiliare.it is not providing any open source data from its own database neither the perception is that it is planning to do so in the future. Immobiliare has not even provided a paid API through which data might be accessed. A careful reading of their terms, reviewed with a intellectual property expert, has been done to get this service running without any legal consequence, as a reference the full policy can be seen in their specialized section. Nevertheless the golden standard for scraping was respected since the robottxt is neat allowing any actions as demonstrated above. So if it might be the case of misinterpretation of their policy, it will be also the case of lack of communication between servers response and immobiliare.it intent to preserve their own intellectual property. Below are checked the permissions to scrape the endpoints: dom = &quot;www.immobiliare.it&quot; robotstxt(dom)$permissions %&gt;% kable(booktabs = T) field useragent value Disallow * *idmacroarea= Disallow * /ricerca-mappa/ Disallow * /ricerca.php Disallow * /ricerca_agenzie.php Disallow * /track-events/ Disallow * /nav-ads/ Disallow * /mutui/calcolatore?prezzo= Disallow * /foto_stampa_beez.php Disallow * /dettaglio.php Disallow * /dettaglio_progetto.php Disallow * *stampa=s Disallow * /news/newsletter/ Disallow * /news/?s= Disallow * /valutazione-immobiliare/valuta- What it was shockingly surprising are the low barriers to obtain information with respect to other counterpart online players. Best practices are applied and delayed requests (even though not asked) have been sent to normalize traffic congestion. But scraping criteria followed are once again fully based on common shared best practises (see section 3.1), and not any sort of general agreements between parties. As a result a plausible approach could be applying scraping procedures without any prevention. It would not surely cause any sort of disservice for the website since budjet constraints are set low, but in the long run it will cause lagging as soon as budjet or subjects will increase. Totally different was the approach proposed by Idealista.com, which is a comparable to immobiliare.it. Idealista does block requests if they are not in compliance with their servers inner rules. User agents in this case must be rotated quite frequently and as soon as a request does not fall within the pool of user agents (i.e. is labled as web bot) it is immediately blocked and 404 response is sent back. Delay is kindly asked and it must be specified, consequnetly this slows down scraping function per se. Idealista content is composed by Javascript so and html parser can no get that. Idealista blocks also certain web browser that have a demonstrated career in scraping procedures. All of this leads to accept that entry barriers to scrape are for sure higher than the one faced for Immobiliare. The reticence to share data could be a reflex on how big idealista is; as a matter of fact it has a heavy market presence in some of the Europe real estate country as Spain and France. So the hidden intention was to raise awareness on scraping procedure that in a certain remote way can hurt their business. This has been validated by the fact that prior filtering houses on their website a checkbox has to be signed. The checkbox make the user sign an agreement on their platform according to which data can not be misused and it belongs their intellectual property. References "]]
